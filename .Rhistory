install.packages("roxygen2")
getwd()
create()
install.packages("devtools")
library(roxygen2)
create()
library(devtools)
create("assimReservoirs")
idwRain <- function(list_output, api){
library(gstat)
library(sp)
library(sf)
library(raster)
api <- subset(api, !is.na(value))
dates <- sort(unique(api$returnedDate))
dailyRain <- data.frame()
idwRaster <- list()
for(i in 1:length(dates)){
apisub <- subset(api, returnedDate == dates[i])
gauges_catch <- merge.data.frame(list_output$gauges_catch, apisub, by = "codigo")
# IDW due to https://mgimond.github.io/Spatial/interpolation-in-r.html ####
# = inverse distance weighted interpolation
# Create an empty grid where n is the total number of cells
g <- st_as_sf(gauges_catch[,c(1,18,21)])
g <- as(g, "Spatial")
b <- as(list_output$catch_buffer, "Spatial")
c <- as(list_output$catch$geometry, "Spatial")
g@bbox <- b@bbox
grd              <- as.data.frame(spsample(g, "regular", n=50000))
names(grd)       <- c("X", "Y")
coordinates(grd) <- c("X", "Y")
gridded(grd)     <- TRUE  # Create SpatialPixel object
fullgrid(grd)    <- TRUE  # Create SpatialGrid object
# Add P's projection information to the empty grid
proj4string(grd) <- proj4string(g)
# Interpolate the grid cells using a power value of 2 (idp=2.0)
idw <- gstat::idw(value ~ 1, g, newdata=grd, idp=2.0)
r <- raster(idw)
r <- mask(r, c)
idwRaster[[i]] <- r # Output: interpolation raster for each day
# Output: daily mean rain for the whole catchment and the reservoir
res <- as(list_output$res$geometry, "Spatial")
daily <- data.frame("date" = dates[i], "catch_mean" = mean(unlist(extract(r, c))), "reservoir_mean" = mean(unlist(extract(r, res))))
dailyRain <- rbind(dailyRain, daily)
}
return(list_idw <- list("idwRaster" = idwRaster, "dailyRain_table" = dailyRain))
}
setwd("D:/DownloadReservoirData")
load("data/list_output.RData")
load("data/api.Rdata")
idwRain <- idwRain(list_output, api)
dailyRain_table <- idwRain$dailyRain_table
idwRaster <- idwRain$idwRaster
idwRaster[[1]]@extent
extent(res)
extent(list_output$res)
e <- extent(list_output$res)
extent(list_output$res)@xmin
e <- extent(list_output$res)
e@xmin
idwRain <- function(list_output, api){
library(gstat)
library(sp)
library(sf)
library(raster)
api <- subset(api, !is.na(value))
dates <- sort(unique(api$returnedDate))
dailyRain <- data.frame()
idwRaster <- list()
for(i in 1:length(dates)){
apisub <- subset(api, returnedDate == dates[i])
gauges_catch <- merge.data.frame(list_output$gauges_catch, apisub, by = "codigo")
# IDW due to https://mgimond.github.io/Spatial/interpolation-in-r.html ####
# = inverse distance weighted interpolation
# Create an empty grid where n is the total number of cells
g <- st_as_sf(gauges_catch[,c(1,18,21)])
g <- as(g, "Spatial")
b <- as(list_output$catch_buffer, "Spatial")
c <- as(list_output$catch$geometry, "Spatial")
g@bbox <- b@bbox
grd              <- as.data.frame(spsample(g, "regular", n=50000))
names(grd)       <- c("X", "Y")
coordinates(grd) <- c("X", "Y")
gridded(grd)     <- TRUE  # Create SpatialPixel object
fullgrid(grd)    <- TRUE  # Create SpatialGrid object
# Add P's projection information to the empty grid
proj4string(grd) <- proj4string(g)
# Interpolate the grid cells using a power value of 2 (idp=2.0)
idw <- gstat::idw(value ~ 1, g, newdata=grd, idp=2.0)
r <- raster(idw)
r <- mask(r, c)
r <- crop(r,c)
idwRaster[[i]] <- r # Output: interpolation raster for each day
# Output: daily mean rain for the whole catchment and the reservoir
res <- as(list_output$res$geometry, "Spatial")
daily <- data.frame("date" = dates[i], "catch_mean" = mean(unlist(extract(r, c))), "reservoir_mean" = mean(unlist(extract(r, res))))
dailyRain <- rbind(dailyRain, daily)
}
return(list_idw <- list("idwRaster" = idwRaster, "dailyRain_table" = dailyRain))
}
idwRain <- idwRain(list_output, api)
dailyRain_table <- idwRain$dailyRain_table
idwRaster <- idwRain$idwRaster
plot(idwRaster[[1]])
plot(list_output$res)
plot(idwRaster[[1]])
plot(list_output$res$geometry, add = T)
plot(list_output$gauges_catch, add = T)
plot(list_output$gauges_catch)
plot(list_output$gauges_catch$geometry)
plot(idwRaster[[1]], add=T)
plot(list_output$res$geometry, add = T)
plot(list_output$gauges_catch$geometry, col = "red")
plot(list_output$gauges_catch$geometry)
plot(idwRaster[[1]], add=T)
plot(list_output$res$geometry, add = T)
plot(list_output$catch$geometry, add = T)
# plot only idw for catchment and reservoir
plot(idwRaster[[1]])
plot(list_output$res$geometry, add = T)
plot(list_output$catch$geometry, add = T)
idwRain <- function(list_output, api){
library(gstat)
library(sp)
library(sf)
library(raster)
api <- subset(api, !is.na(value))
dates <- sort(unique(api$returnedDate))
dailyRain <- data.frame()
idwRaster <- list()
for(i in 1:length(dates)){
apisub <- subset(api, returnedDate == dates[i])
gauges_catch <- merge.data.frame(list_output$gauges_catch, apisub, by = "codigo")
# IDW due to https://mgimond.github.io/Spatial/interpolation-in-r.html ####
# = inverse distance weighted interpolation
# Create an empty grid where n is the total number of cells
g <- st_as_sf(gauges_catch[,c(1,18,21)])
g <- as(g, "Spatial")
b <- as(list_output$catch_buffer, "Spatial")
c <- as(list_output$catch$geometry, "Spatial")
g@bbox <- b@bbox
grd              <- as.data.frame(spsample(g, "regular", n=500000))
names(grd)       <- c("X", "Y")
coordinates(grd) <- c("X", "Y")
gridded(grd)     <- TRUE  # Create SpatialPixel object
fullgrid(grd)    <- TRUE  # Create SpatialGrid object
# Add P's projection information to the empty grid
proj4string(grd) <- proj4string(g)
# Interpolate the grid cells using a power value of 2 (idp=2.0)
idw <- gstat::idw(value ~ 1, g, newdata=grd, idp=2.0)
r <- raster(idw)
r <- mask(r, c)
r <- crop(r,c)
idwRaster[[i]] <- r # Output: interpolation raster for each day
# Output: daily mean rain for the whole catchment and the reservoir
res <- as(list_output$res$geometry, "Spatial")
daily <- data.frame("date" = dates[i], "catch_mean" = mean(unlist(extract(r, c))), "reservoir_mean" = mean(unlist(extract(r, res))))
dailyRain <- rbind(dailyRain, daily)
}
return(list_idw <- list("idwRaster" = idwRaster, "dailyRain_table" = dailyRain))
}
# idwRain
load("data/list_output.RData")
load("data/api.Rdata")
idwRain <- idwRain(list_output, api)
#idwRain
dailyRain_table <- idwRain$dailyRain_table
idwRaster <- idwRain$idwRaster
# plot idw in context of considered gauges
plot(list_output$gauges_catch$geometry)
plot(idwRaster[[1]], add=T)
plot(list_output$res$geometry, add = T)
plot(list_output$catch$geometry, add = T)
# plot idw in context of considered gauges
plot(list_output$gauges_catch$geometry)
plot(idwRaster[[1]], add=T)
# plot only idw for catchment and reservoir
plot(idwRaster[[1]])
plot(list_output$res$geometry, add = T)
plot(list_output$catch$geometry, add = T)
View(idwRain)
View(dailyRain_table)
setwd("D:/assimReservoirs")
install("assimReservoirs")
library(roxygen2)
library(devtools)
document()
install("assimReservoirs")
setwd("D:")
install("assimReservoirs")
setwd("D:/assimReservoirs")
install("assimReservoirs")
setwd("D:")
getwd()
setwd("D")
setwd("D:/")
getwd()
install("assimReservoirs")
plot(list_output$catch)
plot(list_output$catch$geometry)
plot(list_output$res$geometry, col = "red", border = "red", add = T)
plot(list_output$catch$geometry)
plot(list_output$res$geometry, border = "darkred", add = T)
plot(list_output$catch$geometry, main = "Reservoir with contributing catchments")
plot(list_output$res$geometry, border = "darkred", add = T)
plot(list_output$catch_buffer, border = "green")
plot(list_output$catch$geometry, add = T, border = "red", col = "white")
plot(list_output$gauges_catch$geometry, add = T)
setwd("D:/assimReservoirs")
document()
document()
#idwRain
dailyRain <- idwRain$dailyRain_table
idwRaster <- idwRain$idwRaster
document()
install("assimReservoirs")
setwd("D:/")
install("assimReservoirs")
install.packages("Rtools")
library(Rtools)
install.packages("Rtools")
document()
setwd("D:/assimReservoirs")
library(roxygen2)
library(devtools)
document()
plot(list_output$catch$geometry, main = "Reservoir with contributing catchments")
plot(list_output$res$geometry, border = "darkred", add = T)
plot(list_output$catch_buffer, border = "green")
plot(list_output$catch$geometry, add = T, border = "red", col = "white")
plot(list_output$gauges_catch$geometry, add = T)
plot(list_output$catch_buffer, border = "green", main = "Basins with rain gauges in the buffer")
plot(list_output$catch_buffer, border = "green", main = paste("Basins with rain gauges within", distGauges, "km"))
distGauges = 30
plot(list_output$catch_buffer, border = "green", main = paste("Basins with rain gauges within", distGauges, "km"))
plot(list_output$catch$geometry, add = T, border = "red", col = "white")
plot(list_output$gauges_catch$geometry, add = T)
list_idw <- idwRain(list_output, api)
idwRain <- function(list_output, api){
library(gstat)
library(sp)
library(sf)
library(raster)
api <- subset(api, !is.na(value))
dates <- sort(unique(api$returnedDate))
dailyRain <- data.frame()
idwRaster <- list()
for(i in 1:length(dates)){
apisub <- subset(api, returnedDate == dates[i])
gauges_catch <- merge.data.frame(list_output$gauges_catch, apisub, by = "codigo")
# IDW due to https://mgimond.github.io/Spatial/interpolation-in-r.html ####
# = inverse distance weighted interpolation
# Create an empty grid where n is the total number of cells
g <- st_as_sf(gauges_catch[,c(1,18,21)])
g <- as(g, "Spatial")
b <- as(list_output$catch_buffer, "Spatial")
c <- as(list_output$catch$geometry, "Spatial")
g@bbox <- b@bbox
grd              <- as.data.frame(spsample(g, "regular", n=500000))
names(grd)       <- c("X", "Y")
coordinates(grd) <- c("X", "Y")
gridded(grd)     <- TRUE  # Create SpatialPixel object
fullgrid(grd)    <- TRUE  # Create SpatialGrid object
# Add P's projection information to the empty grid
proj4string(grd) <- proj4string(g)
# Interpolate the grid cells using a power value of 2 (idp=2.0)
idw <- gstat::idw(value ~ 1, g, newdata=grd, idp=2.0)
r <- raster(idw)
r <- mask(r, c)
r <- crop(r,c)
idwRaster[[i]] <- r # Output: interpolation raster for each day
# Output: daily mean rain for the whole catchment and the reservoir
res <- as(list_output$res$geometry, "Spatial")
daily <- data.frame("date" = dates[i], "catch_mean" = mean(unlist(extract(r, c))), "reservoir_mean" = mean(unlist(extract(r, res))))
dailyRain <- rbind(dailyRain, daily)
}
return(list_idw <- list("idwRaster" = idwRaster, "dailyRain_table" = dailyRain))
}
list_idw <- idwRain(list_output, api)
#idwRain
dailyRain <- list_idw$dailyRain_table
idwRaster <- list_idw$idwRaster
dailyRain <- list_idw$dailyRain_table
idwRaster <- list_idw$idwRaster
# plot idw in context of considered gauges
plot(list_output$gauges_catch$geometry)
plot(idwRaster[[1]], add=T)
par(mfrow = c(1,2))
# plot idw in context of considered gauges
plot(list_output$gauges_catch$geometry)
plot(idwRaster[[1]], add=T)
# plot only idw for catchment and reservoir
plot(idwRaster[[1]])
plot(list_output$res$geometry, add = T)
plot(list_output$catch$geometry, add = T)
par(mfrow = c(2,1))
# plot idw in context of considered gauges
plot(list_output$gauges_catch$geometry)
plot(idwRaster[[1]], add=T)
# plot only idw for catchment and reservoir
plot(idwRaster[[1]])
plot(list_output$res$geometry, add = T)
plot(list_output$catch$geometry, add = T)
par(mfrow = c(1,1))
# plot only idw for catchment and reservoir
plot(idwRaster[[1]])
plot(list_output$res$geometry, add = T)
plot(list_output$catch$geometry, add = T)
install.packages("Evapotranspiration")
library(Evapotranspiration)
install.package("manipulate")
install.packages("manipulate")
library(manipulate)
View(list_idw)
View(idwRaster)
View(dailyRain)
# plot only idw for catchment and reservoir
manipulate(
plot(idwRaster[[n]]),
plot(list_output$res$geometry, add = T),
plot(list_output$catch$geometry, add = T),
d <- dailyRain$date,
n <- slider(d[1:length(d)])
)
# plot only idw for catchment and reservoir
manipulate(
plot(idwRaster[[n]]),
plot(list_output$res$geometry, add = T),
plot(list_output$catch$geometry, add = T),
d <- dailyRain$date,
n <- slider(d[1:length(d)])
)
# plot only idw for catchment and reservoir
manipulate(
plot(idwRaster[[n]]),
plot(list_output$res$geometry, add = T),
plot(list_output$catch$geometry, add = T),
d <- dailyRain$date,
n <- slider(d[1],length(d))
)
# plot only idw for catchment and reservoir
manipulate(
plot(idwRaster[[n]]),
plot(list_output$res$geometry, add = T),
plot(list_output$catch$geometry, add = T),
d <- dailyRain$date,
n <- slider(1,length(d))
)
View(dailyRain)
# plot only idw for catchment and reservoir
manipulate(
plot(idwRaster[[factor]]),
plot(list_output$res$geometry, add = T),
plot(list_output$catch$geometry, add = T),
#d <- dailyRain$date,
#n <- slider(1,length(d))
factor = picker(1:5)
)
# plot only idw for catchment and reservoir
manipulate(
plot(idwRaster[[factor]]),
plot(list_output$res$geometry, add = T),
plot(list_output$catch$geometry, add = T),
#d <- dailyRain$date,
#n <- slider(1,length(d))
factor = picker(1,2,3,4,5)
)
View(idwRaster)
# plot only idw for catchment and reservoir
manipulate(
plot(idwRaster[[n]]),
n = slider(1,5))
list(1,2,3,4)
a <- list(1,2,3,4)
names(a)<- c("a", "af", "Ab", "c")
a
View(idwRaster)
names(idwRaster) <- dailyRain$date
View(idwRaster)
names(idwRaster) <- c(dailyRain$date)
View(idwRaster)
names(idwRaster)
c(names(idwRaster))
manipulate(
plot(idwRaster[[n]]),
n = picker(names(idwRaster))
)
manipulate(
plot(idwRaster$n),
n = picker(names(idwRaster))
)
manipulate(
plot(paste0("idwRaster$",n)),
n = picker(names(idwRaster))
)
manipulate(
plot(paste0("idwRaster$",n)),
n = picker(c(names(idwRaster)))
)
# plot only idw for catchment and reservoir
manipulate(
plot(idwRaster[[n]]),
n = slider(1,5))
# plot only idw for catchment and reservoir
manipulate(
plot(idwRaster[[n]], main = paste(names(idwRaster[[n]]))),
n = slider(1,5))
names(idwRaster)
# plot only idw for catchment and reservoir
manipulate(
plot(idwRaster[[n]], main = paste(names(idwRaster)[[n]])),
n = slider(1,5))
# plot only idw for catchment and reservoir
manipulate(
plot(idwRaster[[n]], main = paste(names(idwRaster)[[n]])),
plot(list_output$res$geometry, add = T),
n = slider(1,5))
manipulate(
plot(idwRaster[[n]], main = paste(names(idwRaster)[[n]])),
plot(list_output$res$geometry, add = T),
n = slider(1,5))
manipulate(
plot(idwRaster[[n]], main = names(idwRaster)[[n]]),
plot(list_output$res$geometry, add = T),
n = slider(1,5))
plot(1,1)
manipulate(
plot(idwRaster[[n]], main = names(idwRaster)[[n]]),
plot(list_output$res$geometry, add = T),
n = slider(1,5))
manipulate(
plot(idwRaster[[n]], main = names(idwRaster)[[n]]),
n = slider(1,5))
manipulate(
plot(idwRaster[[n]], main = names(idwRaster)[[n]]),
n = slider(1,5)),
plot(list_output$res, add = T)
manipulate(
plot(idwRaster[[n]], main = names(idwRaster)[[n]]),
n = slider(1,5)),
plot(list_output$res$geometry, add = T)
manipulate(
plot(idwRaster[[n]], main = names(idwRaster)[[n]]),
n = slider(1,5)),
plot(list_output$res$geometry, add = T)
manipulate(
plot(idwRaster[[n]], main = names(idwRaster)[[n]]),
plot(list_output$res$geometry, add = T),
n = slider(1,5))
manipulate(
plot(idwRaster[[n]], main = names(idwRaster)[[n]], col = grey(0:100)),
n = slider(1,5))
manipulate(
plot(idwRaster[[n]], main = names(idwRaster)[[n]], col = grey(0:100/1)),
n = slider(1,5))
manipulate(
plot(idwRaster[[n]], main = names(idwRaster)[[n]], col = grey(0:100/100)),
n = slider(1,5))
manipulate(
plot(idwRaster[[n]], main = names(idwRaster)[[n]], col = blue(0:100/100)),
n = slider(1,5))
manipulate(
plot(idwRaster[[n]], main = names(idwRaster)[[n]], col = terrain.colors(3)),
n = slider(1,5))
manipulate(
plot(idwRaster[[n]], main = names(idwRaster)[[n]], col = terrain.colors(100)),
n = slider(1,5))
manipulate(
plot(idwRaster[[n]], main = names(idwRaster)[[n]], col = terrain.colors(100), breaks = c(0:30)),
n = slider(1,5))
manipulate(
plot(idwRaster[[n]], main = names(idwRaster)[[n]], col = grey(0:100/100)),
n = slider(1,5))
manipulate(
plot(idwRaster[[n]], main = names(idwRaster)[[n]]),
n = slider(1,5))
setwd("D:/assimReservoirs")
library(roxygen2)
library(devtools)
document()
setwd("D:/")
install("assimReservoirs")
install("assimReservoirs")
